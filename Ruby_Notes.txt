/*------------------------------
Commands
------------------------------*/

bin/bundle install
bin/yarn install
bin/rails db:install
bin/rails webpacker:install

/*------------------------------
Clear Cache
------------------------------*/

rake tmp:cache:clear

/*------------------------------
Simple responsive table in css
------------------------------*/

https://codepen.io/AllThingsSmitty/pen/MyqmdM

/*------------------------------
Update git config
------------------------------*/

git config --global user.name ""
git config --global user.email ""

/*------------------------------
Local host port
------------------------------*/

http://localhost:3000/

/*------------------------------
Run local command
------------------------------*/

bin/rails server

bin/rails db:migrate  RAILS_ENV=test

sudo service postgresql restart

rake db:schema:load

rails routes

/*------------------------------
SQLite commands
------------------------------*/

​depot>​​ ​​bin/rails​​ ​​dbconsole​
​ 	SQLite version 3.8.2
​ 	Enter ".help" for instructions
​ 	​sqlite>​​ ​​.mode​​ ​​line​
​ 	​sqlite>​​ ​​select​​ ​​*​​ ​​from​​ ​​orders;​
​ 	                  id = 1
​ 	                name = Dave Thomas
​ 	             address = 123 Main St
​ 	               email = customer@example.com
​ 	            pay_type = 0
​ 	          created_at = 2016-05-29 02:31:04.964785
​ 	          updated_at = 2016-05-29 02:31:04.964785
​ 	​sqlite>​​ ​​select​​ ​​*​​ ​​from​​ ​​line_items;​
​ 	               id = 10
​ 	       product_id = 2
​ 	          cart_id =
​ 	       created_at = 2016-05-29 02:30:26.188914
​ 	       updated_at = 2016-05-29 02:31:04.966057
​ 	         quantity = 1
​ 	            price = 45
​ 	         order_id = 1
​ 	​sqlite>​​ ​​.quit​

/*------------------------------
Compile Webpacker commmand
------------------------------*/

bin/rails webpacker:compile

/*------------------------------
To add data files to git, comment out files in gitignore
------------------------------*/

In your top-level project directory, open the file .gitignore in an editor
Comment out the following line (# is the comment symbol):

/db/*.sqlite3

save .gitignore

At the command line, do the following:
1. git add ./db/*.sqlite3
2. git commit -a -m 'added the sqlite db files'
3. git push

/*------------------------------
Configure git commands
------------------------------*/

git remote add origin https://github.com/kw00183/consciousmess.git
git branch -M main
git push -u origin main

Do the git remote and git push instead of just git push from #2. Also change main to master when you git push
Or, if you want to change your default branch name to main, do this:
git checkout -b main
git push -u origin main
git branch -D master
git status (to see your new branch thriving)

/*------------------------------
Example to generate scaffold of model
------------------------------*/

bin/rails generate scaffold Ripple name:string website:string message:string
bin/rails db:migrate
​​bin/rails​​ ​​server​

/*------------------------------
Example to generate model only
------------------------------*/

bin/rails generate model Ripple name:string website:string message:string
bin/rails db:migrate
​​bin/rails​​ ​​server​

/*------------------------------
Example to generate controller only
------------------------------*/

bin/rails generate controller controller_name

/*------------------------------
Destroy generates
------------------------------*/

rails destroy scaffold Theme -f
rails destroy model Theme -f
rails destroy controller Theme -f

/*------------------------------
Reverting to specific git commit
------------------------------*/

git reset --hard <old-commit-id>
git push -f <remote-name> <branch-name>

/*------------------------------
Import csv
------------------------------*/

https://web.archive.org/web/20160307151355/http://erikonrails.snowedin.net/?p=212
rake csv_model_import[conciousmess.csv,ripple]

save file as utf-8 text file in excel
remove any special character weird symbols
add gem 'utf8-cleaner' to Gemfile and run bundle
you need an import.rake file in the lib>tasks folder

/*------------------------------
Add initial commit files to existing empty repository
------------------------------*/

git add . && git commit -m "initial commit"
git branch -M main
git remote add origin https://github.com/kw00183/SplitTheCheck.git
git push -u origin main

/*------------------------------
Create a new repository on the command line
------------------------------*/

echo "# SplitTheCheck" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/kw00183/SplitTheCheck.git
git push -u origin main

/*------------------------------
Push an existing repository
------------------------------*/

git remote add origin https://github.com/kw00183/SplitTheCheck.git
git branch -M main
git push -u origin main

/*------------------------------
Testing 6 Rake Tasks for Running your Tests
------------------------------*/

You don’t need to set up and run your tests by hand on a test-by-test basis. Rails comes with a number of rake tasks to help in testing. The table below lists all rake tasks that come along in the default Rakefile when you initiate a Rails project.
Tasks 	Description
rake test 	             Runs all unit, functional and integration tests. You can also simply run rake as the test target is the default.
rake test:benchmark 	   Benchmark the performance tests
rake test:functionals 	 Runs all the functional tests from test/functional
rake test:integration 	 Runs all the integration tests from test/integration
rake test:plugins 	     Run all the plugin tests from vendor/plugins/*/**/test (or specify with PLUGIN=_name_)
rake test:profile 	     Profile the performance tests
rake test:recent 	      Tests recent changes
rake test:uncommitted 	Runs all the tests which are uncommitted. Supports Subversion and Git
rake test:units 	      Runs all the unit tests from test/unit

/*------------------------------
Devise Gem
------------------------------*/

# create devise views
rails generate devise:views
rails generate devise:controllers users

Depending on your application's configuration some manual setup may be required:

  1. Ensure you have defined default url options in your environments files. Here
     is an example of default_url_options appropriate for a development environment
     in config/environments/development.rb:

       config.action_mailer.default_url_options = { host: 'localhost', port: 3000 }

     In production, :host should be set to the actual host of your application.

     * Required for all applications. *

  2. Ensure you have defined root_url to *something* in your config/routes.rb.
     For example:

       root to: "home#index"

     * Not required for API-only Applications *

  3. Ensure you have flash messages in app/views/layouts/application.html.erb.
     For example:

       <p class="notice"><%= notice %></p>
       <p class="alert"><%= alert %></p>

     * Not required for API-only Applications *

  4. You can copy Devise views (for customization) to your app by running:

       rails g devise:views

     * Not required *

     --- unlock sqlite database

     rails console
     ActiveRecord::Base.connection.execute("BEGIN TRANSACTION; END;")

     --- test_helper

     ENV['RAILS_ENV'] ||= 'test'
     require_relative "../config/environment"
     require "rails/test_help"

     class ActiveSupport::TestCase
       # Run tests in parallel with specified workers
       # parallelize(workers: :number_of_processors)

       # Setup all fixtures in test/fixtures/*.yml for all tests in alphabetical order.
       fixtures :all

       # Add more helper methods to be used by all tests here...
       include Devise::Test::IntegrationHelpers
     end

     --- system test sign in users

     sign_in users(:user_1)

     --- disable route testing

     assert_response(type, message = nil) public

     Asserts that the response is one of the following types:

    :success: Status code was 200
    :redirect: Status code was in the 300-399 range
    :missing: Status code was 404
    :error: Status code was in the 500-599 range

~~CS6920 Project-Specific Notes~~

#############################
 Rails Initial Project Setup
#############################

# assuming use of Ubuntu VM - small tweaks may be needed for local

cd Documents

git clone https://github.com/asuratte/report-it.git

cd report-it

bundle

# go to /config/database.yml and note the development database name

# move on to postgres setup in a new terminal

################
 Postgres Setup
################

## Steps for setting up a Postgres db server on Local:

# Go to https://www.postgresql.org/download/ and download your version

# Go through the wizard steps and note any usernames, passwords, port details etc.

# Pin pgAdmin4 and SQL shell (psql) to task bar for future use

# Use pgAdmin4 to create a database called report_it_development

# Still in pgAdmin4 create a db user with your terminal username and the password cs6920t4

# Also create a database called report_it_test with the same password as development

# note that the above steps can also be done with psql shell using the steps below


## Steps for setting up a Postgres db server on ubuntu:

# Open a terminal window which you will use for the postgresql server.

# install postgresql
sudo apt-get install postgresql

# verify that it was installed
which psql

# invoke psql command line client tool to interact with the db engine
sudo -u postgres psql

# enter your VM or machine user password when prompted
# you may get an error like 'could not change directory to "/home/as00193": Permission denied' - this should be OK

# type the following into the postgres interpreter to check the connection details
\conninfo

# to see a list of all dbs available on the server
\l

# :wq to get out of that screen

# to see a list of all users with their privileges
\du

# set a password for the default user
# I chose cs6920t4, not sure if we all need to do the same thing
\password postgres

# create a user that matches your terminal username
create user as00193 with encrypted password 'passwordGoesHere';

# create a database named as specified in your database.yml of your rails app
CREATE DATABASE database_name_goes_here;

# connect to the newly created database
\c database_name_goes_here

# for when you want to disconnect from postgres (not needed right now)
\q

##########################
 Rails Connect to Server
##########################

bin/rails server -b 0.0.0.0

# visit http://0.0.0.0:3000 and app should be running with "Welcome to ReportIt" message

#########################################################
 If having bundle install issues with postgres on mac
#########################################################

# in a separate terminal run
sudo find / -name "pg_config" -print to find the path to pg on your local

# Run
gem install pg -- --with-pg-config=/Library/PostgreSQL/14/bin/pg_config

# where /Library/PostgreSQL/14/bin/pg_config is the path returned from the "find" command above

# Run
bundle install

##################
 Bootstrap Notes
##################

Bootstrap 5 is the version that is installed

Docs for commonly used components:

# containers
https://getbootstrap.com/docs/5.0/layout/containers/

# grid system
https://getbootstrap.com/docs/5.0/layout/grid/

# forms
https://getbootstrap.com/docs/5.0/forms/overview/

# buttons
https://getbootstrap.com/docs/5.0/components/buttons/

# navbar
https://getbootstrap.com/docs/5.0/components/navbar/

# spacing utilities
https://getbootstrap.com/docs/5.0/utilities/spacing/

Example usage:

# Example error message alert with class .alert.alert-danger:
<% if @user.errors.any? %>
    <div id="error_explanation" class="alert alert-danger">
      <p><%= pluralize(@user.errors.count, "error") %> prohibited this user from being added:</p>

      <ul>
        <% @user.errors.each do |error| %>
          <li><%= error.full_message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

# Example form text input with classes .field, .form-label, .form-control:
 <div class="field mb-3">
      <%= f.label :last_name, 'Last Name', :class => 'form-label required' %>
      <%= f.text_field :last_name, :class => 'form-control' %>
 </div>

 # Example Utility Classes for spacing:
 <%= link_to 'Back', users_path, :class => 'd-inline-block my-3' %>
# Run
bundle install

/*------------------------------
Commands for Postgres and install pq libraries
------------------------------*/

https://www3.ntu.edu.sg/home/ehchua/programming/sql/PostgreSQL_GetStarted.html
https://www.digitalocean.com/community/tutorials/how-to-install-and-use-postgresql-on-ubuntu-20-04

sudo apt install libpq-dev
bundle install

/*------------------------------
If database does not connect
------------------------------*/

rake db:create:all
rake db:migrate

/*------------------------------
Pull/Merge/Rebase in git
------------------------------*/

git pull
git checkout reports-index
bundle

MERGE TO MAIN

git checkout validator
git merge origin/main
git push

FETCH

    git pull --all         Pull all remote branches
    git branch -a          List all branches now

Checkout and switch to the feature-branch directory. You can simply copy the branch name from the output of branch -a command above

    git checkout -b feature-branch

VALIDATE

Next use the git branch command to see the current branch. It will show feature-branch with * In front of it

git branch   check current branch
git status   check the state of your codebase

COMMIT

git add .   add all untracked files
git commit -m "Refactor code or use your message"

Take update and the push changes on the origin server

 git pull origin feature-branch
 git push origin feature-branch

OR you can rebase with the master before commit

git fetch
git rebase origin/master
git push origin feature-branch

/*------------------------------
User types
------------------------------*/

0 = resident
1 = official
2 = admin

/*------------------------------
theme
------------------------------*/

logo:string
hero:string
font_google:string
font_google_url:string
font_default:string
color_header_text:string --C6682A
color_accent:string --C6682A
color_text_dark:string --2F3334
color_text_light:string --FFFFFF
color_login_bar:string --2F3334
color_header_background:string --EFEEEC
color_footer_background:string --EFEEEC
color_button_primary:string --C6682A
color_button_secondary:string --7E7D7D
color_button_hover:string --F49F0A
color_button_text_dark:string --2F3334
color_button_text_light:string --FFFFFF
color_nav_link:string --1577A6
color_nav_link_hover:string --F49F0A
color_page_link:string --1577A6
color_page_link_active:string --FF5C00
color_page_background:string --EFEEEC
color_page_border:string --EFEEEC
color_table_before:string --7E7D7D
color_list_even:string --FFFFFF
color_list_odd:string --F5F5F5
color_container_link:string --FF5C00
color_container_link_hover:string --F49F0A

/* colors */
C6682A
EFEEEC
A4B424
1577A6
2F3334
6F7A80
A4B078
64B09C
64B464
FF5C00
F49F0A
7E7D7D
F5F5F5
FFFFFF

/*------------------------------
Report Status Enum Reference
------------------------------*/

0 active
1 spam
2 abuse
3 outside_area